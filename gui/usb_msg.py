# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# ! AUTOGENERATED BY generate_interface.py, DO NOT EDIT !
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
from collections import namedtuple
import struct

DATA_FMT = '>BHH'
READ_FMT = '>BH'
DATA_FLAG = 0x80

def pack(msg):
    return globals()['_pack_' + type(msg).__name__](msg)

def unpack(msg_bytes):
    if len(msg_bytes) != struct.calcsize(DATA_FMT):
        raise RuntimeError('Cannot unpack data with unexpected length %u' % len(msg_bytes))

    group, addr, data = struct.unpack(DATA_FMT, msg_bytes)
    if group in _unpack_mem_fns:
        return _unpack_mem_fns[group](addr, data)
    else:
        return _unpack_reg_fns[(group, addr)](data)

ReadChannels = namedtuple('ReadChannels', ['addr'])
ReadChannels.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
Channels = namedtuple('Channels', ['addr', 'data'])
Channels.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteChannels = namedtuple('WriteChannels', ['addr', 'data'])
WriteChannels.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadSimFixed = namedtuple('ReadSimFixed', ['addr'])
ReadSimFixed.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
SimFixed = namedtuple('SimFixed', ['addr', 'parity', 'data'])
SimFixed.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteSimFixed = namedtuple('WriteSimFixed', ['addr', 'parity', 'data'])
WriteSimFixed.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadNASSPCh10 = namedtuple('ReadNASSPCh10', [])
ReadNASSPCh10.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
NASSPCh10 = namedtuple('NASSPCh10', ['value'])
NASSPCh10.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteNASSPCh10 = namedtuple('WriteNASSPCh10', ['value'])
WriteNASSPCh10.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadNASSPCh30 = namedtuple('ReadNASSPCh30', [])
ReadNASSPCh30.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
NASSPCh30 = namedtuple('NASSPCh30', ['value', 'enable'])
NASSPCh30.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteNASSPCh30 = namedtuple('WriteNASSPCh30', ['value', 'enable'])
WriteNASSPCh30.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadNASSPCh31 = namedtuple('ReadNASSPCh31', [])
ReadNASSPCh31.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
NASSPCh31 = namedtuple('NASSPCh31', ['value', 'enable'])
NASSPCh31.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteNASSPCh31 = namedtuple('WriteNASSPCh31', ['value', 'enable'])
WriteNASSPCh31.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadNASSPCh32 = namedtuple('ReadNASSPCh32', [])
ReadNASSPCh32.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
NASSPCh32 = namedtuple('NASSPCh32', ['value', 'enable'])
NASSPCh32.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteNASSPCh32 = namedtuple('WriteNASSPCh32', ['value', 'enable'])
WriteNASSPCh32.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadNASSPCh33 = namedtuple('ReadNASSPCh33', [])
ReadNASSPCh33.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
NASSPCh33 = namedtuple('NASSPCh33', ['value', 'enable'])
NASSPCh33.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteNASSPCh33 = namedtuple('WriteNASSPCh33', ['value', 'enable'])
WriteNASSPCh33.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadNASSPTlossMcts = namedtuple('ReadNASSPTlossMcts', [])
ReadNASSPTlossMcts.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
NASSPTlossMcts = namedtuple('NASSPTlossMcts', ['value'])
NASSPTlossMcts.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteNASSPTlossMcts = namedtuple('WriteNASSPTlossMcts', ['value'])
WriteNASSPTlossMcts.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadNASSPTlossT12s = namedtuple('ReadNASSPTlossT12s', [])
ReadNASSPTlossT12s.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
NASSPTlossT12s = namedtuple('NASSPTlossT12s', ['value'])
NASSPTlossT12s.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteNASSPTlossT12s = namedtuple('WriteNASSPTlossT12s', ['value'])
WriteNASSPTlossT12s.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadNASSPPipaX = namedtuple('ReadNASSPPipaX', [])
ReadNASSPPipaX.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
NASSPPipaX = namedtuple('NASSPPipaX', ['counts'])
NASSPPipaX.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteNASSPPipaX = namedtuple('WriteNASSPPipaX', ['counts'])
WriteNASSPPipaX.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadNASSPPipaY = namedtuple('ReadNASSPPipaY', [])
ReadNASSPPipaY.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
NASSPPipaY = namedtuple('NASSPPipaY', ['counts'])
NASSPPipaY.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteNASSPPipaY = namedtuple('WriteNASSPPipaY', ['counts'])
WriteNASSPPipaY.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadNASSPPipaZ = namedtuple('ReadNASSPPipaZ', [])
ReadNASSPPipaZ.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
NASSPPipaZ = namedtuple('NASSPPipaZ', ['counts'])
NASSPPipaZ.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteNASSPPipaZ = namedtuple('WriteNASSPPipaZ', ['counts'])
WriteNASSPPipaZ.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadNASSPCduXCmd = namedtuple('ReadNASSPCduXCmd', [])
ReadNASSPCduXCmd.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
NASSPCduXCmd = namedtuple('NASSPCduXCmd', ['counts', 'new'])
NASSPCduXCmd.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadNASSPCduYCmd = namedtuple('ReadNASSPCduYCmd', [])
ReadNASSPCduYCmd.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
NASSPCduYCmd = namedtuple('NASSPCduYCmd', ['counts', 'new'])
NASSPCduYCmd.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadNASSPCduZCmd = namedtuple('ReadNASSPCduZCmd', [])
ReadNASSPCduZCmd.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
NASSPCduZCmd = namedtuple('NASSPCduZCmd', ['counts', 'new'])
NASSPCduZCmd.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadNASSPCduTCmd = namedtuple('ReadNASSPCduTCmd', [])
ReadNASSPCduTCmd.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
NASSPCduTCmd = namedtuple('NASSPCduTCmd', ['counts', 'new'])
NASSPCduTCmd.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadNASSPCduSCmd = namedtuple('ReadNASSPCduSCmd', [])
ReadNASSPCduSCmd.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
NASSPCduSCmd = namedtuple('NASSPCduSCmd', ['counts', 'new'])
NASSPCduSCmd.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadNASSPThrust = namedtuple('ReadNASSPThrust', [])
ReadNASSPThrust.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
NASSPThrust = namedtuple('NASSPThrust', ['counts', 'new'])
NASSPThrust.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadNASSPAltm = namedtuple('ReadNASSPAltm', [])
ReadNASSPAltm.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
NASSPAltm = namedtuple('NASSPAltm', ['counts', 'new'])
NASSPAltm.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonChanFEXT = namedtuple('ReadMonChanFEXT', [])
ReadMonChanFEXT.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonChanFEXT = namedtuple('MonChanFEXT', ['fext'])
MonChanFEXT.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonChanDownlink = namedtuple('ReadMonChanDownlink', [])
ReadMonChanDownlink.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonChanDownlink = namedtuple('MonChanDownlink', ['data', 'valid'])
MonChanDownlink.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonChanRestart = namedtuple('ReadMonChanRestart', [])
ReadMonChanRestart.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonChanRestart = namedtuple('MonChanRestart', ['parity_fail', 'parity_erasable', 'tc_trap', 'rupt_lock', 'night_watchman', 'voltage_fail', 'counter_fail', 'scaler_fail', 'scaler_double'])
MonChanRestart.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadDSKYProg = namedtuple('ReadDSKYProg', [])
ReadDSKYProg.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
DSKYProg = namedtuple('DSKYProg', ['digit1', 'digit2'])
DSKYProg.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadDSKYVerb = namedtuple('ReadDSKYVerb', [])
ReadDSKYVerb.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
DSKYVerb = namedtuple('DSKYVerb', ['digit1', 'digit2'])
DSKYVerb.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadDSKYNoun = namedtuple('ReadDSKYNoun', [])
ReadDSKYNoun.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
DSKYNoun = namedtuple('DSKYNoun', ['digit1', 'digit2'])
DSKYNoun.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadDSKYReg1L = namedtuple('ReadDSKYReg1L', [])
ReadDSKYReg1L.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
DSKYReg1L = namedtuple('DSKYReg1L', ['digit1', 'digit2', 'digit3'])
DSKYReg1L.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadDSKYReg1H = namedtuple('ReadDSKYReg1H', [])
ReadDSKYReg1H.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
DSKYReg1H = namedtuple('DSKYReg1H', ['digit4', 'digit5', 'sign'])
DSKYReg1H.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadDSKYReg2L = namedtuple('ReadDSKYReg2L', [])
ReadDSKYReg2L.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
DSKYReg2L = namedtuple('DSKYReg2L', ['digit1', 'digit2', 'digit3'])
DSKYReg2L.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadDSKYReg2H = namedtuple('ReadDSKYReg2H', [])
ReadDSKYReg2H.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
DSKYReg2H = namedtuple('DSKYReg2H', ['digit4', 'digit5', 'sign'])
DSKYReg2H.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadDSKYReg3L = namedtuple('ReadDSKYReg3L', [])
ReadDSKYReg3L.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
DSKYReg3L = namedtuple('DSKYReg3L', ['digit1', 'digit2', 'digit3'])
DSKYReg3L.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadDSKYReg3H = namedtuple('ReadDSKYReg3H', [])
ReadDSKYReg3H.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
DSKYReg3H = namedtuple('DSKYReg3H', ['digit4', 'digit5', 'sign'])
DSKYReg3H.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteDSKYButton = namedtuple('WriteDSKYButton', ['keycode'])
WriteDSKYButton.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteDSKYProceed = namedtuple('WriteDSKYProceed', [])
WriteDSKYProceed.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadDSKYStatus = namedtuple('ReadDSKYStatus', [])
ReadDSKYStatus.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
DSKYStatus = namedtuple('DSKYStatus', ['vel', 'alt', 'tracker', 'restart', 'prog', 'gimbal_lock', 'temp', 'prio_disp', 'no_dap', 'opr_err', 'key_rel', 'stby', 'no_att', 'uplink_acty', 'comp_acty', 'vnflash'])
DSKYStatus.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteDSKYNavButton = namedtuple('WriteDSKYNavButton', ['keycode'])
WriteDSKYNavButton.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadErasable = namedtuple('ReadErasable', ['addr'])
ReadErasable.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
Erasable = namedtuple('Erasable', ['addr', 'parity', 'data'])
Erasable.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteErasable = namedtuple('WriteErasable', ['addr', 'parity', 'data'])
WriteErasable.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlStart = namedtuple('WriteControlStart', [])
WriteControlStart.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlStop = namedtuple('ReadControlStop', [])
ReadControlStop.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlStop = namedtuple('ControlStop', ['t12', 'nisq', 's1', 's2', 'w', 's_w', 's_i', 'chan', 'par', 'i', 'prog_step', 's1_s2'])
ControlStop.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlStop = namedtuple('WriteControlStop', ['t12', 'nisq', 's1', 's2', 'w', 's_w', 's_i', 'chan', 'par', 'i', 'prog_step', 's1_s2'])
WriteControlStop.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlStopCause = namedtuple('ReadControlStopCause', [])
ReadControlStopCause.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlStopCause = namedtuple('ControlStopCause', ['t12', 'nisq', 's1', 's2', 'w', 's_w', 's_i', 'chan', 'par', 'i', 'prog_step'])
ControlStopCause.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlProceed = namedtuple('WriteControlProceed', [])
WriteControlProceed.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlMNHRPT = namedtuple('ReadControlMNHRPT', [])
ReadControlMNHRPT.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlMNHRPT = namedtuple('ControlMNHRPT', ['mnhrpt'])
ControlMNHRPT.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlMNHRPT = namedtuple('WriteControlMNHRPT', ['mnhrpt'])
WriteControlMNHRPT.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlMNHNC = namedtuple('ReadControlMNHNC', [])
ReadControlMNHNC.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlMNHNC = namedtuple('ControlMNHNC', ['mnhnc'])
ControlMNHNC.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlMNHNC = namedtuple('WriteControlMNHNC', ['mnhnc'])
WriteControlMNHNC.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlS1S = namedtuple('ReadControlS1S', [])
ReadControlS1S.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlS1S = namedtuple('ControlS1S', ['s'])
ControlS1S.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlS1S = namedtuple('WriteControlS1S', ['s'])
WriteControlS1S.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlS1Bank = namedtuple('ReadControlS1Bank', [])
ReadControlS1Bank.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlS1Bank = namedtuple('ControlS1Bank', ['eb', 'fext', 'fb'])
ControlS1Bank.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlS1Bank = namedtuple('WriteControlS1Bank', ['eb', 'fext', 'fb'])
WriteControlS1Bank.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlS1SIgnore = namedtuple('ReadControlS1SIgnore', [])
ReadControlS1SIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlS1SIgnore = namedtuple('ControlS1SIgnore', ['s'])
ControlS1SIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlS1SIgnore = namedtuple('WriteControlS1SIgnore', ['s'])
WriteControlS1SIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlS1BankIgnore = namedtuple('ReadControlS1BankIgnore', [])
ReadControlS1BankIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlS1BankIgnore = namedtuple('ControlS1BankIgnore', ['eb', 'fext', 'fb'])
ControlS1BankIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlS1BankIgnore = namedtuple('WriteControlS1BankIgnore', ['eb', 'fext', 'fb'])
WriteControlS1BankIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlS2S = namedtuple('ReadControlS2S', [])
ReadControlS2S.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlS2S = namedtuple('ControlS2S', ['s'])
ControlS2S.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlS2S = namedtuple('WriteControlS2S', ['s'])
WriteControlS2S.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlS2Bank = namedtuple('ReadControlS2Bank', [])
ReadControlS2Bank.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlS2Bank = namedtuple('ControlS2Bank', ['eb', 'fext', 'fb'])
ControlS2Bank.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlS2Bank = namedtuple('WriteControlS2Bank', ['eb', 'fext', 'fb'])
WriteControlS2Bank.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlS2SIgnore = namedtuple('ReadControlS2SIgnore', [])
ReadControlS2SIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlS2SIgnore = namedtuple('ControlS2SIgnore', ['s'])
ControlS2SIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlS2SIgnore = namedtuple('WriteControlS2SIgnore', ['s'])
WriteControlS2SIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlS2BankIgnore = namedtuple('ReadControlS2BankIgnore', [])
ReadControlS2BankIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlS2BankIgnore = namedtuple('ControlS2BankIgnore', ['eb', 'fext', 'fb'])
ControlS2BankIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlS2BankIgnore = namedtuple('WriteControlS2BankIgnore', ['eb', 'fext', 'fb'])
WriteControlS2BankIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlWriteW = namedtuple('ReadControlWriteW', [])
ReadControlWriteW.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlWriteW = namedtuple('ControlWriteW', ['mode', 's1_s2'])
ControlWriteW.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlWriteW = namedtuple('WriteControlWriteW', ['mode', 's1_s2'])
WriteControlWriteW.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlTimeSwitches = namedtuple('ReadControlTimeSwitches', [])
ReadControlTimeSwitches.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlTimeSwitches = namedtuple('ControlTimeSwitches', ['t01', 't02', 't03', 't04', 't05', 't06', 't07', 't08', 't09', 't10', 't11', 't12'])
ControlTimeSwitches.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlTimeSwitches = namedtuple('WriteControlTimeSwitches', ['t01', 't02', 't03', 't04', 't05', 't06', 't07', 't08', 't09', 't10', 't11', 't12'])
WriteControlTimeSwitches.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlPulseSwitches = namedtuple('ReadControlPulseSwitches', [])
ReadControlPulseSwitches.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlPulseSwitches = namedtuple('ControlPulseSwitches', ['a', 'z', 'q', 'x', 'y', 'u', 'b', 'g', 'l', 'wch', 'rch', 'sp'])
ControlPulseSwitches.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlPulseSwitches = namedtuple('WriteControlPulseSwitches', ['a', 'z', 'q', 'x', 'y', 'u', 'b', 'g', 'l', 'wch', 'rch', 'sp'])
WriteControlPulseSwitches.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlWCompVal = namedtuple('ReadControlWCompVal', [])
ReadControlWCompVal.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlWCompVal = namedtuple('ControlWCompVal', ['val'])
ControlWCompVal.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlWCompVal = namedtuple('WriteControlWCompVal', ['val'])
WriteControlWCompVal.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlWCompIgnore = namedtuple('ReadControlWCompIgnore', [])
ReadControlWCompIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlWCompIgnore = namedtuple('ControlWCompIgnore', ['ignore'])
ControlWCompIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlWCompIgnore = namedtuple('WriteControlWCompIgnore', ['ignore'])
WriteControlWCompIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlWCompParity = namedtuple('ReadControlWCompParity', [])
ReadControlWCompParity.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlWCompParity = namedtuple('ControlWCompParity', ['parity', 'ignore'])
ControlWCompParity.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlWCompParity = namedtuple('WriteControlWCompParity', ['parity', 'ignore'])
WriteControlWCompParity.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlICompVal = namedtuple('ReadControlICompVal', [])
ReadControlICompVal.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlICompVal = namedtuple('ControlICompVal', ['sq', 'sqext', 'st', 'br'])
ControlICompVal.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlICompVal = namedtuple('WriteControlICompVal', ['sq', 'sqext', 'st', 'br'])
WriteControlICompVal.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlICompIgnore = namedtuple('ReadControlICompIgnore', [])
ReadControlICompIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlICompIgnore = namedtuple('ControlICompIgnore', ['sq', 'sqext', 'st', 'br'])
ControlICompIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlICompIgnore = namedtuple('WriteControlICompIgnore', ['sq', 'sqext', 'st', 'br'])
WriteControlICompIgnore.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlICompStatus = namedtuple('ReadControlICompStatus', [])
ReadControlICompStatus.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlICompStatus = namedtuple('ControlICompStatus', ['iip', 'inhl', 'inkl', 'ld', 'chld', 'rd', 'chrd', 'iip_ign', 'inhl_ign', 'inkl_ign', 'ld_ign', 'chld_ign', 'rd_ign', 'chrd_ign'])
ControlICompStatus.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlICompStatus = namedtuple('WriteControlICompStatus', ['iip', 'inhl', 'inkl', 'ld', 'chld', 'rd', 'chrd', 'iip_ign', 'inhl_ign', 'inkl_ign', 'ld_ign', 'chld_ign', 'rd_ign', 'chrd_ign'])
WriteControlICompStatus.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlLoadReadS1S2 = namedtuple('ReadControlLoadReadS1S2', [])
ReadControlLoadReadS1S2.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlLoadReadS1S2 = namedtuple('ControlLoadReadS1S2', ['load_preset', 'load_chan', 'read_preset', 'read_chan', 'start_preset'])
ControlLoadReadS1S2.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlLoadReadS1S2 = namedtuple('WriteControlLoadReadS1S2', ['load_preset', 'load_chan', 'read_preset', 'read_chan', 'start_preset'])
WriteControlLoadReadS1S2.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlBankS = namedtuple('ReadControlBankS', [])
ReadControlBankS.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlBankS = namedtuple('ControlBankS', ['s_only'])
ControlBankS.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlBankS = namedtuple('WriteControlBankS', ['s_only'])
WriteControlBankS.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlAdvanceS = namedtuple('WriteControlAdvanceS', [])
WriteControlAdvanceS.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlCRSBankEnable0 = namedtuple('WriteControlCRSBankEnable0', ['f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f10', 'f11', 'f12', 'f13', 'f14', 'f15', 'f16', 'f17'])
WriteControlCRSBankEnable0.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlCRSBankEnable1 = namedtuple('WriteControlCRSBankEnable1', ['f20', 'f21', 'f22', 'f23', 'f24', 'f25', 'f26', 'f27', 'f30', 'f31', 'f32', 'f33', 'f34', 'f35', 'f36', 'f37'])
WriteControlCRSBankEnable1.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlCRSBankEnable2 = namedtuple('WriteControlCRSBankEnable2', ['f40', 'f41', 'f42', 'f43', 'f44', 'f45', 'f46', 'f47', 'f50', 'f51', 'f52', 'f53', 'f54', 'f55', 'f56', 'f57'])
WriteControlCRSBankEnable2.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlCRSBankEnable3 = namedtuple('WriteControlCRSBankEnable3', ['f60', 'f61', 'f62', 'f63', 'f64', 'f65', 'f66', 'f67', 'f70', 'f71', 'f72', 'f73', 'f74', 'f75', 'f76', 'f77'])
WriteControlCRSBankEnable3.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlEMSBankEnable = namedtuple('WriteControlEMSBankEnable', ['e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7'])
WriteControlEMSBankEnable.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlDoscal = namedtuple('ReadControlDoscal', [])
ReadControlDoscal.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlDoscal = namedtuple('ControlDoscal', ['doscal'])
ControlDoscal.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlDoscal = namedtuple('WriteControlDoscal', ['doscal'])
WriteControlDoscal.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlDbltst = namedtuple('ReadControlDbltst', [])
ReadControlDbltst.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlDbltst = namedtuple('ControlDbltst', ['dbltst'])
ControlDbltst.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlDbltst = namedtuple('WriteControlDbltst', ['dbltst'])
WriteControlDbltst.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlNHALGA = namedtuple('ReadControlNHALGA', [])
ReadControlNHALGA.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlNHALGA = namedtuple('ControlNHALGA', ['nhalga'])
ControlNHALGA.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlNHALGA = namedtuple('WriteControlNHALGA', ['nhalga'])
WriteControlNHALGA.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlSTRT1 = namedtuple('ReadControlSTRT1', [])
ReadControlSTRT1.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlSTRT1 = namedtuple('ControlSTRT1', ['strt1'])
ControlSTRT1.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlSTRT1 = namedtuple('WriteControlSTRT1', ['strt1'])
WriteControlSTRT1.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadControlSTRT2 = namedtuple('ReadControlSTRT2', [])
ReadControlSTRT2.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ControlSTRT2 = namedtuple('ControlSTRT2', ['strt2'])
ControlSTRT2.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlSTRT2 = namedtuple('WriteControlSTRT2', ['strt2'])
WriteControlSTRT2.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlDownrupt = namedtuple('WriteControlDownrupt', ['downrupt'])
WriteControlDownrupt.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlHandrupt = namedtuple('WriteControlHandrupt', ['handrupt'])
WriteControlHandrupt.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlLoadS = namedtuple('WriteControlLoadS', [])
WriteControlLoadS.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlLoadPreset = namedtuple('WriteControlLoadPreset', [])
WriteControlLoadPreset.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlLoadChan = namedtuple('WriteControlLoadChan', [])
WriteControlLoadChan.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlReadS = namedtuple('WriteControlReadS', [])
WriteControlReadS.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlReadPreset = namedtuple('WriteControlReadPreset', [])
WriteControlReadPreset.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlReadChan = namedtuple('WriteControlReadChan', [])
WriteControlReadChan.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlStartS = namedtuple('WriteControlStartS', [])
WriteControlStartS.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteControlStartPreset = namedtuple('WriteControlStartPreset', [])
WriteControlStartPreset.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegA = namedtuple('ReadMonRegA', [])
ReadMonRegA.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegA = namedtuple('MonRegA', ['a'])
MonRegA.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegL = namedtuple('ReadMonRegL', [])
ReadMonRegL.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegL = namedtuple('MonRegL', ['l'])
MonRegL.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegQ = namedtuple('ReadMonRegQ', [])
ReadMonRegQ.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegQ = namedtuple('MonRegQ', ['q'])
MonRegQ.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegZ = namedtuple('ReadMonRegZ', [])
ReadMonRegZ.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegZ = namedtuple('MonRegZ', ['z'])
MonRegZ.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegBB = namedtuple('ReadMonRegBB', [])
ReadMonRegBB.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegBB = namedtuple('MonRegBB', ['eb', 'fb'])
MonRegBB.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegB = namedtuple('ReadMonRegB', [])
ReadMonRegB.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegB = namedtuple('MonRegB', ['b'])
MonRegB.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegS = namedtuple('ReadMonRegS', [])
ReadMonRegS.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegS = namedtuple('MonRegS', ['s'])
MonRegS.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegG = namedtuple('ReadMonRegG', [])
ReadMonRegG.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegG = namedtuple('MonRegG', ['g'])
MonRegG.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegY = namedtuple('ReadMonRegY', [])
ReadMonRegY.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegY = namedtuple('MonRegY', ['y'])
MonRegY.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegU = namedtuple('ReadMonRegU', [])
ReadMonRegU.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegU = namedtuple('MonRegU', ['u'])
MonRegU.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegI = namedtuple('ReadMonRegI', [])
ReadMonRegI.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegI = namedtuple('MonRegI', ['sq', 'sqext', 'st', 'br'])
MonRegI.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegStatus = namedtuple('ReadMonRegStatus', [])
ReadMonRegStatus.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegStatus = namedtuple('MonRegStatus', ['gojam', 'run', 'iip', 'inhl', 'inkl', 'outcom'])
MonRegStatus.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegParity = namedtuple('ReadMonRegParity', [])
ReadMonRegParity.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegParity = namedtuple('MonRegParity', ['g_gp', 'g_sp', 'w_gp', 'w_sp'])
MonRegParity.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadMonRegW = namedtuple('ReadMonRegW', [])
ReadMonRegW.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
MonRegW = namedtuple('MonRegW', ['w'])
MonRegW.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadFixed = namedtuple('ReadFixed', ['addr'])
ReadFixed.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
Fixed = namedtuple('Fixed', ['addr', 'parity', 'data'])
Fixed.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadTrace = namedtuple('ReadTrace', ['addr'])
ReadTrace.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
Trace = namedtuple('Trace', ['addr', 'data'])
Trace.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadSimErasable = namedtuple('ReadSimErasable', ['addr'])
ReadSimErasable.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
SimErasable = namedtuple('SimErasable', ['addr', 'parity', 'data'])
SimErasable.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteSimErasable = namedtuple('WriteSimErasable', ['addr', 'parity', 'data'])
WriteSimErasable.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadStatusAlarms = namedtuple('ReadStatusAlarms', [])
ReadStatusAlarms.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
StatusAlarms = namedtuple('StatusAlarms', ['vfail', 'oscal', 'scafl', 'scdbl', 'ctral', 'tcal', 'rptal', 'fpal', 'epal', 'watch', 'pipal', 'warn'])
StatusAlarms.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
WriteStatusAlarms = namedtuple('WriteStatusAlarms', ['vfail', 'oscal', 'scafl', 'scdbl', 'ctral', 'tcal', 'rptal', 'fpal', 'epal', 'watch', 'pipal', 'warn'])
WriteStatusAlarms.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadStatusPeripheral = namedtuple('ReadStatusPeripheral', [])
ReadStatusPeripheral.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
StatusPeripheral = namedtuple('StatusPeripheral', ['crs_cycle', 'ems_cycle', 'ld', 'chld', 'rd', 'chrd'])
StatusPeripheral.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadStatusMonTemp = namedtuple('ReadStatusMonTemp', [])
ReadStatusMonTemp.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
StatusMonTemp = namedtuple('StatusMonTemp', ['counts'])
StatusMonTemp.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadStatusVccInt = namedtuple('ReadStatusVccInt', [])
ReadStatusVccInt.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
StatusVccInt = namedtuple('StatusVccInt', ['counts'])
StatusVccInt.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadStatusVccAux = namedtuple('ReadStatusVccAux', [])
ReadStatusVccAux.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
StatusVccAux = namedtuple('StatusVccAux', ['counts'])
StatusVccAux.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadStatusAgcA15 = namedtuple('ReadStatusAgcA15', [])
ReadStatusAgcA15.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
StatusAgcA15 = namedtuple('StatusAgcA15', ['counts'])
StatusAgcA15.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadStatusAgcA16 = namedtuple('ReadStatusAgcA16', [])
ReadStatusAgcA16.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
StatusAgcA16 = namedtuple('StatusAgcA16', ['counts'])
StatusAgcA16.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadStatusMismatchAddr = namedtuple('ReadStatusMismatchAddr', [])
ReadStatusMismatchAddr.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
StatusMismatchAddr = namedtuple('StatusMismatchAddr', ['addr'])
StatusMismatchAddr.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
ReadStatusMismatchData = namedtuple('ReadStatusMismatchData', [])
ReadStatusMismatchData.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))
StatusMismatchData = namedtuple('StatusMismatchData', ['data'])
StatusMismatchData.__eq__ = lambda a,b: (type(a) is type(b)) and (tuple(a) == tuple(b))

class AddressGroup(object):
    Channels = 0x02
    SimFixed = 0x11
    NASSP = 0x26
    MonChan = 0x22
    DSKY = 0x23
    Erasable = 0x00
    Control = 0x20
    MonReg = 0x21
    Fixed = 0x01
    Trace = 0x25
    SimErasable = 0x10
    Status = 0x24

class NASSP(object):
    Ch10 = 0x0000
    Ch30 = 0x0001
    Ch31 = 0x0002
    Ch32 = 0x0003
    Ch33 = 0x0004
    TlossMcts = 0x0010
    TlossT12s = 0x0011
    PipaX = 0x0020
    PipaY = 0x0021
    PipaZ = 0x0022
    CduXCmd = 0x0030
    CduYCmd = 0x0031
    CduZCmd = 0x0032
    CduTCmd = 0x0033
    CduSCmd = 0x0034
    Thrust = 0x0035
    Altm = 0x0036
class MonChan(object):
    FEXT = 0x0007
    Downlink = 0x001C
    Restart = 0x003F
class DSKY(object):
    Prog = 0x0000
    Verb = 0x0001
    Noun = 0x0002
    Reg1L = 0x0003
    Reg1H = 0x0004
    Reg2L = 0x0005
    Reg2H = 0x0006
    Reg3L = 0x0007
    Reg3H = 0x0008
    Button = 0x0009
    Proceed = 0x000A
    Status = 0x000B
    NavButton = 0x000C
class Control(object):
    Start = 0x0000
    Stop = 0x0001
    StopCause = 0x0002
    Proceed = 0x0003
    MNHRPT = 0x0004
    MNHNC = 0x0005
    S1S = 0x0006
    S1Bank = 0x0007
    S1SIgnore = 0x0008
    S1BankIgnore = 0x0009
    S2S = 0x000A
    S2Bank = 0x000B
    S2SIgnore = 0x000C
    S2BankIgnore = 0x000D
    WriteW = 0x000E
    TimeSwitches = 0x000F
    PulseSwitches = 0x0010
    WCompVal = 0x0011
    WCompIgnore = 0x0012
    WCompParity = 0x0013
    ICompVal = 0x0014
    ICompIgnore = 0x0015
    ICompStatus = 0x0016
    LoadReadS1S2 = 0x0017
    BankS = 0x0018
    AdvanceS = 0x0019
    CRSBankEnable0 = 0x001A
    CRSBankEnable1 = 0x001B
    CRSBankEnable2 = 0x001C
    CRSBankEnable3 = 0x001D
    EMSBankEnable = 0x001E
    Doscal = 0x0030
    Dbltst = 0x0031
    NHALGA = 0x0040
    STRT1 = 0x0041
    STRT2 = 0x0042
    Downrupt = 0x0050
    Handrupt = 0x0051
    LoadS = 0x0070
    LoadPreset = 0x0071
    LoadChan = 0x0072
    ReadS = 0x0073
    ReadPreset = 0x0074
    ReadChan = 0x0075
    StartS = 0x0076
    StartPreset = 0x0077
class MonReg(object):
    A = 0x0000
    L = 0x0001
    Q = 0x0002
    Z = 0x0003
    BB = 0x0004
    B = 0x0005
    S = 0x0006
    G = 0x0007
    Y = 0x0008
    U = 0x0009
    I = 0x000A
    Status = 0x000B
    Parity = 0x000C
    W = 0x0040
class Status(object):
    Alarms = 0x0000
    Peripheral = 0x0001
    MonTemp = 0x0010
    VccInt = 0x0011
    VccAux = 0x0012
    AgcA15 = 0x0013
    AgcA16 = 0x0014
    MismatchAddr = 0x0040
    MismatchData = 0x0041

class WriteWMode:
    ALL = 0
    S = 1
    I = 2
    S_I = 3
    P = 4
    P_I = 5
    P_S = 6

def _pack_ReadChannels(msg):
    return _pack_read_msg(AddressGroup.Channels, msg.addr)

def _pack_WriteChannels(msg):
    data = 0x0000
    data |= (msg.data & 0xFFFF) << 0
    return _pack_write_msg(AddressGroup.Channels, msg.addr, data)

def _pack_ReadSimFixed(msg):
    return _pack_read_msg(AddressGroup.SimFixed, msg.addr)

def _pack_WriteSimFixed(msg):
    data = 0x0000
    data |= (msg.parity & 0x0001) << 0
    data |= (msg.data & 0x7FFF) << 1
    return _pack_write_msg(AddressGroup.SimFixed, msg.addr, data)

def _pack_ReadNASSPCh10(msg):
    return _pack_read_msg(AddressGroup.NASSP, NASSP.Ch10)

def _pack_WriteNASSPCh10(msg):
    data = 0x0000
    data |= (msg.value & 0x7FFF) << 0
    return _pack_write_msg(AddressGroup.NASSP, NASSP.Ch10, data)

def _pack_ReadNASSPCh30(msg):
    return _pack_read_msg(AddressGroup.NASSP, NASSP.Ch30)

def _pack_WriteNASSPCh30(msg):
    data = 0x0000
    data |= (msg.value & 0x7FFF) << 0
    data |= (msg.enable & 0x0001) << 15
    return _pack_write_msg(AddressGroup.NASSP, NASSP.Ch30, data)

def _pack_ReadNASSPCh31(msg):
    return _pack_read_msg(AddressGroup.NASSP, NASSP.Ch31)

def _pack_WriteNASSPCh31(msg):
    data = 0x0000
    data |= (msg.value & 0x7FFF) << 0
    data |= (msg.enable & 0x0001) << 15
    return _pack_write_msg(AddressGroup.NASSP, NASSP.Ch31, data)

def _pack_ReadNASSPCh32(msg):
    return _pack_read_msg(AddressGroup.NASSP, NASSP.Ch32)

def _pack_WriteNASSPCh32(msg):
    data = 0x0000
    data |= (msg.value & 0x7FFF) << 0
    data |= (msg.enable & 0x0001) << 15
    return _pack_write_msg(AddressGroup.NASSP, NASSP.Ch32, data)

def _pack_ReadNASSPCh33(msg):
    return _pack_read_msg(AddressGroup.NASSP, NASSP.Ch33)

def _pack_WriteNASSPCh33(msg):
    data = 0x0000
    data |= (msg.value & 0x7FFF) << 0
    data |= (msg.enable & 0x0001) << 15
    return _pack_write_msg(AddressGroup.NASSP, NASSP.Ch33, data)

def _pack_ReadNASSPTlossMcts(msg):
    return _pack_read_msg(AddressGroup.NASSP, NASSP.TlossMcts)

def _pack_WriteNASSPTlossMcts(msg):
    data = 0x0000
    data |= (msg.value & 0xFFFF) << 0
    return _pack_write_msg(AddressGroup.NASSP, NASSP.TlossMcts, data)

def _pack_ReadNASSPTlossT12s(msg):
    return _pack_read_msg(AddressGroup.NASSP, NASSP.TlossT12s)

def _pack_WriteNASSPTlossT12s(msg):
    data = 0x0000
    data |= (msg.value & 0xFFFF) << 0
    return _pack_write_msg(AddressGroup.NASSP, NASSP.TlossT12s, data)

def _pack_ReadNASSPPipaX(msg):
    return _pack_read_msg(AddressGroup.NASSP, NASSP.PipaX)

def _pack_WriteNASSPPipaX(msg):
    data = 0x0000
    data |= (msg.counts & 0x7FFF) << 0
    return _pack_write_msg(AddressGroup.NASSP, NASSP.PipaX, data)

def _pack_ReadNASSPPipaY(msg):
    return _pack_read_msg(AddressGroup.NASSP, NASSP.PipaY)

def _pack_WriteNASSPPipaY(msg):
    data = 0x0000
    data |= (msg.counts & 0x7FFF) << 0
    return _pack_write_msg(AddressGroup.NASSP, NASSP.PipaY, data)

def _pack_ReadNASSPPipaZ(msg):
    return _pack_read_msg(AddressGroup.NASSP, NASSP.PipaZ)

def _pack_WriteNASSPPipaZ(msg):
    data = 0x0000
    data |= (msg.counts & 0x7FFF) << 0
    return _pack_write_msg(AddressGroup.NASSP, NASSP.PipaZ, data)

def _pack_ReadNASSPCduXCmd(msg):
    return _pack_read_msg(AddressGroup.NASSP, NASSP.CduXCmd)

def _pack_ReadNASSPCduYCmd(msg):
    return _pack_read_msg(AddressGroup.NASSP, NASSP.CduYCmd)

def _pack_ReadNASSPCduZCmd(msg):
    return _pack_read_msg(AddressGroup.NASSP, NASSP.CduZCmd)

def _pack_ReadNASSPCduTCmd(msg):
    return _pack_read_msg(AddressGroup.NASSP, NASSP.CduTCmd)

def _pack_ReadNASSPCduSCmd(msg):
    return _pack_read_msg(AddressGroup.NASSP, NASSP.CduSCmd)

def _pack_ReadNASSPThrust(msg):
    return _pack_read_msg(AddressGroup.NASSP, NASSP.Thrust)

def _pack_ReadNASSPAltm(msg):
    return _pack_read_msg(AddressGroup.NASSP, NASSP.Altm)

def _pack_ReadMonChanFEXT(msg):
    return _pack_read_msg(AddressGroup.MonChan, MonChan.FEXT)

def _pack_ReadMonChanDownlink(msg):
    return _pack_read_msg(AddressGroup.MonChan, MonChan.Downlink)

def _pack_ReadMonChanRestart(msg):
    return _pack_read_msg(AddressGroup.MonChan, MonChan.Restart)

def _pack_ReadDSKYProg(msg):
    return _pack_read_msg(AddressGroup.DSKY, DSKY.Prog)

def _pack_ReadDSKYVerb(msg):
    return _pack_read_msg(AddressGroup.DSKY, DSKY.Verb)

def _pack_ReadDSKYNoun(msg):
    return _pack_read_msg(AddressGroup.DSKY, DSKY.Noun)

def _pack_ReadDSKYReg1L(msg):
    return _pack_read_msg(AddressGroup.DSKY, DSKY.Reg1L)

def _pack_ReadDSKYReg1H(msg):
    return _pack_read_msg(AddressGroup.DSKY, DSKY.Reg1H)

def _pack_ReadDSKYReg2L(msg):
    return _pack_read_msg(AddressGroup.DSKY, DSKY.Reg2L)

def _pack_ReadDSKYReg2H(msg):
    return _pack_read_msg(AddressGroup.DSKY, DSKY.Reg2H)

def _pack_ReadDSKYReg3L(msg):
    return _pack_read_msg(AddressGroup.DSKY, DSKY.Reg3L)

def _pack_ReadDSKYReg3H(msg):
    return _pack_read_msg(AddressGroup.DSKY, DSKY.Reg3H)

def _pack_WriteDSKYButton(msg):
    data = 0x0000
    data |= (msg.keycode & 0x001F) << 0
    return _pack_write_msg(AddressGroup.DSKY, DSKY.Button, data)

def _pack_WriteDSKYProceed(msg):
    data = 0x0000
    return _pack_write_msg(AddressGroup.DSKY, DSKY.Proceed, data)

def _pack_ReadDSKYStatus(msg):
    return _pack_read_msg(AddressGroup.DSKY, DSKY.Status)

def _pack_WriteDSKYNavButton(msg):
    data = 0x0000
    data |= (msg.keycode & 0x001F) << 0
    return _pack_write_msg(AddressGroup.DSKY, DSKY.NavButton, data)

def _pack_ReadErasable(msg):
    return _pack_read_msg(AddressGroup.Erasable, msg.addr)

def _pack_WriteErasable(msg):
    data = 0x0000
    data |= (msg.parity & 0x0001) << 0
    data |= (msg.data & 0x7FFF) << 1
    return _pack_write_msg(AddressGroup.Erasable, msg.addr, data)

def _pack_WriteControlStart(msg):
    data = 0x0000
    return _pack_write_msg(AddressGroup.Control, Control.Start, data)

def _pack_ReadControlStop(msg):
    return _pack_read_msg(AddressGroup.Control, Control.Stop)

def _pack_WriteControlStop(msg):
    data = 0x0000
    data |= (msg.t12 & 0x0001) << 0
    data |= (msg.nisq & 0x0001) << 1
    data |= (msg.s1 & 0x0001) << 2
    data |= (msg.s2 & 0x0001) << 3
    data |= (msg.w & 0x0001) << 4
    data |= (msg.s_w & 0x0001) << 5
    data |= (msg.s_i & 0x0001) << 6
    data |= (msg.chan & 0x0001) << 7
    data |= (msg.par & 0x0001) << 8
    data |= (msg.i & 0x0001) << 9
    data |= (msg.prog_step & 0x0001) << 10
    data |= (msg.s1_s2 & 0x0001) << 11
    return _pack_write_msg(AddressGroup.Control, Control.Stop, data)

def _pack_ReadControlStopCause(msg):
    return _pack_read_msg(AddressGroup.Control, Control.StopCause)

def _pack_WriteControlProceed(msg):
    data = 0x0000
    return _pack_write_msg(AddressGroup.Control, Control.Proceed, data)

def _pack_ReadControlMNHRPT(msg):
    return _pack_read_msg(AddressGroup.Control, Control.MNHRPT)

def _pack_WriteControlMNHRPT(msg):
    data = 0x0000
    data |= (msg.mnhrpt & 0x0001) << 0
    return _pack_write_msg(AddressGroup.Control, Control.MNHRPT, data)

def _pack_ReadControlMNHNC(msg):
    return _pack_read_msg(AddressGroup.Control, Control.MNHNC)

def _pack_WriteControlMNHNC(msg):
    data = 0x0000
    data |= (msg.mnhnc & 0x0001) << 0
    return _pack_write_msg(AddressGroup.Control, Control.MNHNC, data)

def _pack_ReadControlS1S(msg):
    return _pack_read_msg(AddressGroup.Control, Control.S1S)

def _pack_WriteControlS1S(msg):
    data = 0x0000
    data |= (msg.s & 0x0FFF) << 0
    return _pack_write_msg(AddressGroup.Control, Control.S1S, data)

def _pack_ReadControlS1Bank(msg):
    return _pack_read_msg(AddressGroup.Control, Control.S1Bank)

def _pack_WriteControlS1Bank(msg):
    data = 0x0000
    data |= (msg.eb & 0x0007) << 0
    data |= (msg.fext & 0x0007) << 4
    data |= (msg.fb & 0x001F) << 10
    return _pack_write_msg(AddressGroup.Control, Control.S1Bank, data)

def _pack_ReadControlS1SIgnore(msg):
    return _pack_read_msg(AddressGroup.Control, Control.S1SIgnore)

def _pack_WriteControlS1SIgnore(msg):
    data = 0x0000
    data |= (msg.s & 0x0FFF) << 0
    return _pack_write_msg(AddressGroup.Control, Control.S1SIgnore, data)

def _pack_ReadControlS1BankIgnore(msg):
    return _pack_read_msg(AddressGroup.Control, Control.S1BankIgnore)

def _pack_WriteControlS1BankIgnore(msg):
    data = 0x0000
    data |= (msg.eb & 0x0007) << 0
    data |= (msg.fext & 0x0007) << 4
    data |= (msg.fb & 0x001F) << 10
    return _pack_write_msg(AddressGroup.Control, Control.S1BankIgnore, data)

def _pack_ReadControlS2S(msg):
    return _pack_read_msg(AddressGroup.Control, Control.S2S)

def _pack_WriteControlS2S(msg):
    data = 0x0000
    data |= (msg.s & 0x0FFF) << 0
    return _pack_write_msg(AddressGroup.Control, Control.S2S, data)

def _pack_ReadControlS2Bank(msg):
    return _pack_read_msg(AddressGroup.Control, Control.S2Bank)

def _pack_WriteControlS2Bank(msg):
    data = 0x0000
    data |= (msg.eb & 0x0007) << 0
    data |= (msg.fext & 0x0007) << 4
    data |= (msg.fb & 0x001F) << 10
    return _pack_write_msg(AddressGroup.Control, Control.S2Bank, data)

def _pack_ReadControlS2SIgnore(msg):
    return _pack_read_msg(AddressGroup.Control, Control.S2SIgnore)

def _pack_WriteControlS2SIgnore(msg):
    data = 0x0000
    data |= (msg.s & 0x0FFF) << 0
    return _pack_write_msg(AddressGroup.Control, Control.S2SIgnore, data)

def _pack_ReadControlS2BankIgnore(msg):
    return _pack_read_msg(AddressGroup.Control, Control.S2BankIgnore)

def _pack_WriteControlS2BankIgnore(msg):
    data = 0x0000
    data |= (msg.eb & 0x0007) << 0
    data |= (msg.fext & 0x0007) << 4
    data |= (msg.fb & 0x001F) << 10
    return _pack_write_msg(AddressGroup.Control, Control.S2BankIgnore, data)

def _pack_ReadControlWriteW(msg):
    return _pack_read_msg(AddressGroup.Control, Control.WriteW)

def _pack_WriteControlWriteW(msg):
    data = 0x0000
    data |= (msg.mode & 0x0007) << 0
    data |= (msg.s1_s2 & 0x0001) << 3
    return _pack_write_msg(AddressGroup.Control, Control.WriteW, data)

def _pack_ReadControlTimeSwitches(msg):
    return _pack_read_msg(AddressGroup.Control, Control.TimeSwitches)

def _pack_WriteControlTimeSwitches(msg):
    data = 0x0000
    data |= (msg.t01 & 0x0001) << 0
    data |= (msg.t02 & 0x0001) << 1
    data |= (msg.t03 & 0x0001) << 2
    data |= (msg.t04 & 0x0001) << 3
    data |= (msg.t05 & 0x0001) << 4
    data |= (msg.t06 & 0x0001) << 5
    data |= (msg.t07 & 0x0001) << 6
    data |= (msg.t08 & 0x0001) << 7
    data |= (msg.t09 & 0x0001) << 8
    data |= (msg.t10 & 0x0001) << 9
    data |= (msg.t11 & 0x0001) << 10
    data |= (msg.t12 & 0x0001) << 11
    return _pack_write_msg(AddressGroup.Control, Control.TimeSwitches, data)

def _pack_ReadControlPulseSwitches(msg):
    return _pack_read_msg(AddressGroup.Control, Control.PulseSwitches)

def _pack_WriteControlPulseSwitches(msg):
    data = 0x0000
    data |= (msg.a & 0x0001) << 0
    data |= (msg.z & 0x0001) << 1
    data |= (msg.q & 0x0001) << 2
    data |= (msg.x & 0x0001) << 3
    data |= (msg.y & 0x0001) << 4
    data |= (msg.u & 0x0001) << 5
    data |= (msg.b & 0x0001) << 6
    data |= (msg.g & 0x0001) << 7
    data |= (msg.l & 0x0001) << 8
    data |= (msg.wch & 0x0001) << 9
    data |= (msg.rch & 0x0001) << 10
    data |= (msg.sp & 0x0001) << 11
    return _pack_write_msg(AddressGroup.Control, Control.PulseSwitches, data)

def _pack_ReadControlWCompVal(msg):
    return _pack_read_msg(AddressGroup.Control, Control.WCompVal)

def _pack_WriteControlWCompVal(msg):
    data = 0x0000
    data |= (msg.val & 0xFFFF) << 0
    return _pack_write_msg(AddressGroup.Control, Control.WCompVal, data)

def _pack_ReadControlWCompIgnore(msg):
    return _pack_read_msg(AddressGroup.Control, Control.WCompIgnore)

def _pack_WriteControlWCompIgnore(msg):
    data = 0x0000
    data |= (msg.ignore & 0xFFFF) << 0
    return _pack_write_msg(AddressGroup.Control, Control.WCompIgnore, data)

def _pack_ReadControlWCompParity(msg):
    return _pack_read_msg(AddressGroup.Control, Control.WCompParity)

def _pack_WriteControlWCompParity(msg):
    data = 0x0000
    data |= (msg.parity & 0x0003) << 0
    data |= (msg.ignore & 0x0003) << 2
    return _pack_write_msg(AddressGroup.Control, Control.WCompParity, data)

def _pack_ReadControlICompVal(msg):
    return _pack_read_msg(AddressGroup.Control, Control.ICompVal)

def _pack_WriteControlICompVal(msg):
    data = 0x0000
    data |= (msg.sq & 0x003F) << 0
    data |= (msg.sqext & 0x0001) << 6
    data |= (msg.st & 0x0007) << 7
    data |= (msg.br & 0x0003) << 10
    return _pack_write_msg(AddressGroup.Control, Control.ICompVal, data)

def _pack_ReadControlICompIgnore(msg):
    return _pack_read_msg(AddressGroup.Control, Control.ICompIgnore)

def _pack_WriteControlICompIgnore(msg):
    data = 0x0000
    data |= (msg.sq & 0x003F) << 0
    data |= (msg.sqext & 0x0001) << 6
    data |= (msg.st & 0x0007) << 7
    data |= (msg.br & 0x0003) << 10
    return _pack_write_msg(AddressGroup.Control, Control.ICompIgnore, data)

def _pack_ReadControlICompStatus(msg):
    return _pack_read_msg(AddressGroup.Control, Control.ICompStatus)

def _pack_WriteControlICompStatus(msg):
    data = 0x0000
    data |= (msg.iip & 0x0001) << 0
    data |= (msg.inhl & 0x0001) << 1
    data |= (msg.inkl & 0x0001) << 2
    data |= (msg.ld & 0x0001) << 3
    data |= (msg.chld & 0x0001) << 4
    data |= (msg.rd & 0x0001) << 5
    data |= (msg.chrd & 0x0001) << 6
    data |= (msg.iip_ign & 0x0001) << 7
    data |= (msg.inhl_ign & 0x0001) << 8
    data |= (msg.inkl_ign & 0x0001) << 9
    data |= (msg.ld_ign & 0x0001) << 10
    data |= (msg.chld_ign & 0x0001) << 11
    data |= (msg.rd_ign & 0x0001) << 12
    data |= (msg.chrd_ign & 0x0001) << 13
    return _pack_write_msg(AddressGroup.Control, Control.ICompStatus, data)

def _pack_ReadControlLoadReadS1S2(msg):
    return _pack_read_msg(AddressGroup.Control, Control.LoadReadS1S2)

def _pack_WriteControlLoadReadS1S2(msg):
    data = 0x0000
    data |= (msg.load_preset & 0x0001) << 0
    data |= (msg.load_chan & 0x0001) << 1
    data |= (msg.read_preset & 0x0001) << 2
    data |= (msg.read_chan & 0x0001) << 3
    data |= (msg.start_preset & 0x0001) << 4
    return _pack_write_msg(AddressGroup.Control, Control.LoadReadS1S2, data)

def _pack_ReadControlBankS(msg):
    return _pack_read_msg(AddressGroup.Control, Control.BankS)

def _pack_WriteControlBankS(msg):
    data = 0x0000
    data |= (msg.s_only & 0x0001) << 0
    return _pack_write_msg(AddressGroup.Control, Control.BankS, data)

def _pack_WriteControlAdvanceS(msg):
    data = 0x0000
    return _pack_write_msg(AddressGroup.Control, Control.AdvanceS, data)

def _pack_WriteControlCRSBankEnable0(msg):
    data = 0x0000
    data |= (msg.f0 & 0x0001) << 0
    data |= (msg.f1 & 0x0001) << 1
    data |= (msg.f2 & 0x0001) << 2
    data |= (msg.f3 & 0x0001) << 3
    data |= (msg.f4 & 0x0001) << 4
    data |= (msg.f5 & 0x0001) << 5
    data |= (msg.f6 & 0x0001) << 6
    data |= (msg.f7 & 0x0001) << 7
    data |= (msg.f10 & 0x0001) << 8
    data |= (msg.f11 & 0x0001) << 9
    data |= (msg.f12 & 0x0001) << 10
    data |= (msg.f13 & 0x0001) << 11
    data |= (msg.f14 & 0x0001) << 12
    data |= (msg.f15 & 0x0001) << 13
    data |= (msg.f16 & 0x0001) << 14
    data |= (msg.f17 & 0x0001) << 15
    return _pack_write_msg(AddressGroup.Control, Control.CRSBankEnable0, data)

def _pack_WriteControlCRSBankEnable1(msg):
    data = 0x0000
    data |= (msg.f20 & 0x0001) << 0
    data |= (msg.f21 & 0x0001) << 1
    data |= (msg.f22 & 0x0001) << 2
    data |= (msg.f23 & 0x0001) << 3
    data |= (msg.f24 & 0x0001) << 4
    data |= (msg.f25 & 0x0001) << 5
    data |= (msg.f26 & 0x0001) << 6
    data |= (msg.f27 & 0x0001) << 7
    data |= (msg.f30 & 0x0001) << 8
    data |= (msg.f31 & 0x0001) << 9
    data |= (msg.f32 & 0x0001) << 10
    data |= (msg.f33 & 0x0001) << 11
    data |= (msg.f34 & 0x0001) << 12
    data |= (msg.f35 & 0x0001) << 13
    data |= (msg.f36 & 0x0001) << 14
    data |= (msg.f37 & 0x0001) << 15
    return _pack_write_msg(AddressGroup.Control, Control.CRSBankEnable1, data)

def _pack_WriteControlCRSBankEnable2(msg):
    data = 0x0000
    data |= (msg.f40 & 0x0001) << 0
    data |= (msg.f41 & 0x0001) << 1
    data |= (msg.f42 & 0x0001) << 2
    data |= (msg.f43 & 0x0001) << 3
    data |= (msg.f44 & 0x0001) << 4
    data |= (msg.f45 & 0x0001) << 5
    data |= (msg.f46 & 0x0001) << 6
    data |= (msg.f47 & 0x0001) << 7
    data |= (msg.f50 & 0x0001) << 8
    data |= (msg.f51 & 0x0001) << 9
    data |= (msg.f52 & 0x0001) << 10
    data |= (msg.f53 & 0x0001) << 11
    data |= (msg.f54 & 0x0001) << 12
    data |= (msg.f55 & 0x0001) << 13
    data |= (msg.f56 & 0x0001) << 14
    data |= (msg.f57 & 0x0001) << 15
    return _pack_write_msg(AddressGroup.Control, Control.CRSBankEnable2, data)

def _pack_WriteControlCRSBankEnable3(msg):
    data = 0x0000
    data |= (msg.f60 & 0x0001) << 0
    data |= (msg.f61 & 0x0001) << 1
    data |= (msg.f62 & 0x0001) << 2
    data |= (msg.f63 & 0x0001) << 3
    data |= (msg.f64 & 0x0001) << 4
    data |= (msg.f65 & 0x0001) << 5
    data |= (msg.f66 & 0x0001) << 6
    data |= (msg.f67 & 0x0001) << 7
    data |= (msg.f70 & 0x0001) << 8
    data |= (msg.f71 & 0x0001) << 9
    data |= (msg.f72 & 0x0001) << 10
    data |= (msg.f73 & 0x0001) << 11
    data |= (msg.f74 & 0x0001) << 12
    data |= (msg.f75 & 0x0001) << 13
    data |= (msg.f76 & 0x0001) << 14
    data |= (msg.f77 & 0x0001) << 15
    return _pack_write_msg(AddressGroup.Control, Control.CRSBankEnable3, data)

def _pack_WriteControlEMSBankEnable(msg):
    data = 0x0000
    data |= (msg.e0 & 0x0001) << 0
    data |= (msg.e1 & 0x0001) << 1
    data |= (msg.e2 & 0x0001) << 2
    data |= (msg.e3 & 0x0001) << 3
    data |= (msg.e4 & 0x0001) << 4
    data |= (msg.e5 & 0x0001) << 5
    data |= (msg.e6 & 0x0001) << 6
    data |= (msg.e7 & 0x0001) << 7
    return _pack_write_msg(AddressGroup.Control, Control.EMSBankEnable, data)

def _pack_ReadControlDoscal(msg):
    return _pack_read_msg(AddressGroup.Control, Control.Doscal)

def _pack_WriteControlDoscal(msg):
    data = 0x0000
    data |= (msg.doscal & 0x0001) << 0
    return _pack_write_msg(AddressGroup.Control, Control.Doscal, data)

def _pack_ReadControlDbltst(msg):
    return _pack_read_msg(AddressGroup.Control, Control.Dbltst)

def _pack_WriteControlDbltst(msg):
    data = 0x0000
    data |= (msg.dbltst & 0x0001) << 0
    return _pack_write_msg(AddressGroup.Control, Control.Dbltst, data)

def _pack_ReadControlNHALGA(msg):
    return _pack_read_msg(AddressGroup.Control, Control.NHALGA)

def _pack_WriteControlNHALGA(msg):
    data = 0x0000
    data |= (msg.nhalga & 0x0001) << 0
    return _pack_write_msg(AddressGroup.Control, Control.NHALGA, data)

def _pack_ReadControlSTRT1(msg):
    return _pack_read_msg(AddressGroup.Control, Control.STRT1)

def _pack_WriteControlSTRT1(msg):
    data = 0x0000
    data |= (msg.strt1 & 0x0001) << 0
    return _pack_write_msg(AddressGroup.Control, Control.STRT1, data)

def _pack_ReadControlSTRT2(msg):
    return _pack_read_msg(AddressGroup.Control, Control.STRT2)

def _pack_WriteControlSTRT2(msg):
    data = 0x0000
    data |= (msg.strt2 & 0x0001) << 0
    return _pack_write_msg(AddressGroup.Control, Control.STRT2, data)

def _pack_WriteControlDownrupt(msg):
    data = 0x0000
    data |= (msg.downrupt & 0x0001) << 0
    return _pack_write_msg(AddressGroup.Control, Control.Downrupt, data)

def _pack_WriteControlHandrupt(msg):
    data = 0x0000
    data |= (msg.handrupt & 0x0001) << 0
    return _pack_write_msg(AddressGroup.Control, Control.Handrupt, data)

def _pack_WriteControlLoadS(msg):
    data = 0x0000
    return _pack_write_msg(AddressGroup.Control, Control.LoadS, data)

def _pack_WriteControlLoadPreset(msg):
    data = 0x0000
    return _pack_write_msg(AddressGroup.Control, Control.LoadPreset, data)

def _pack_WriteControlLoadChan(msg):
    data = 0x0000
    return _pack_write_msg(AddressGroup.Control, Control.LoadChan, data)

def _pack_WriteControlReadS(msg):
    data = 0x0000
    return _pack_write_msg(AddressGroup.Control, Control.ReadS, data)

def _pack_WriteControlReadPreset(msg):
    data = 0x0000
    return _pack_write_msg(AddressGroup.Control, Control.ReadPreset, data)

def _pack_WriteControlReadChan(msg):
    data = 0x0000
    return _pack_write_msg(AddressGroup.Control, Control.ReadChan, data)

def _pack_WriteControlStartS(msg):
    data = 0x0000
    return _pack_write_msg(AddressGroup.Control, Control.StartS, data)

def _pack_WriteControlStartPreset(msg):
    data = 0x0000
    return _pack_write_msg(AddressGroup.Control, Control.StartPreset, data)

def _pack_ReadMonRegA(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.A)

def _pack_ReadMonRegL(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.L)

def _pack_ReadMonRegQ(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.Q)

def _pack_ReadMonRegZ(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.Z)

def _pack_ReadMonRegBB(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.BB)

def _pack_ReadMonRegB(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.B)

def _pack_ReadMonRegS(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.S)

def _pack_ReadMonRegG(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.G)

def _pack_ReadMonRegY(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.Y)

def _pack_ReadMonRegU(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.U)

def _pack_ReadMonRegI(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.I)

def _pack_ReadMonRegStatus(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.Status)

def _pack_ReadMonRegParity(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.Parity)

def _pack_ReadMonRegW(msg):
    return _pack_read_msg(AddressGroup.MonReg, MonReg.W)

def _pack_ReadFixed(msg):
    return _pack_read_msg(AddressGroup.Fixed, msg.addr)

def _pack_ReadTrace(msg):
    return _pack_read_msg(AddressGroup.Trace, msg.addr)

def _pack_ReadSimErasable(msg):
    return _pack_read_msg(AddressGroup.SimErasable, msg.addr)

def _pack_WriteSimErasable(msg):
    data = 0x0000
    data |= (msg.parity & 0x0001) << 0
    data |= (msg.data & 0x7FFF) << 1
    return _pack_write_msg(AddressGroup.SimErasable, msg.addr, data)

def _pack_ReadStatusAlarms(msg):
    return _pack_read_msg(AddressGroup.Status, Status.Alarms)

def _pack_WriteStatusAlarms(msg):
    data = 0x0000
    data |= (msg.vfail & 0x0001) << 0
    data |= (msg.oscal & 0x0001) << 1
    data |= (msg.scafl & 0x0001) << 2
    data |= (msg.scdbl & 0x0001) << 3
    data |= (msg.ctral & 0x0001) << 4
    data |= (msg.tcal & 0x0001) << 5
    data |= (msg.rptal & 0x0001) << 6
    data |= (msg.fpal & 0x0001) << 7
    data |= (msg.epal & 0x0001) << 8
    data |= (msg.watch & 0x0001) << 9
    data |= (msg.pipal & 0x0001) << 10
    data |= (msg.warn & 0x0001) << 11
    return _pack_write_msg(AddressGroup.Status, Status.Alarms, data)

def _pack_ReadStatusPeripheral(msg):
    return _pack_read_msg(AddressGroup.Status, Status.Peripheral)

def _pack_ReadStatusMonTemp(msg):
    return _pack_read_msg(AddressGroup.Status, Status.MonTemp)

def _pack_ReadStatusVccInt(msg):
    return _pack_read_msg(AddressGroup.Status, Status.VccInt)

def _pack_ReadStatusVccAux(msg):
    return _pack_read_msg(AddressGroup.Status, Status.VccAux)

def _pack_ReadStatusAgcA15(msg):
    return _pack_read_msg(AddressGroup.Status, Status.AgcA15)

def _pack_ReadStatusAgcA16(msg):
    return _pack_read_msg(AddressGroup.Status, Status.AgcA16)

def _pack_ReadStatusMismatchAddr(msg):
    return _pack_read_msg(AddressGroup.Status, Status.MismatchAddr)

def _pack_ReadStatusMismatchData(msg):
    return _pack_read_msg(AddressGroup.Status, Status.MismatchData)


def _unpack_Channels(addr, data):
    return Channels(
        addr = addr,
        data = (data >> 0) & 0xFFFF,
    )

def _unpack_SimFixed(addr, data):
    return SimFixed(
        addr = addr,
        parity = (data >> 0) & 0x0001,
        data = (data >> 1) & 0x7FFF,
    )

def _unpack_NASSPCh10(data):
    return NASSPCh10(
        value = (data >> 0) & 0x7FFF,
    )

def _unpack_NASSPCh30(data):
    return NASSPCh30(
        value = (data >> 0) & 0x7FFF,
        enable = (data >> 15) & 0x0001,
    )

def _unpack_NASSPCh31(data):
    return NASSPCh31(
        value = (data >> 0) & 0x7FFF,
        enable = (data >> 15) & 0x0001,
    )

def _unpack_NASSPCh32(data):
    return NASSPCh32(
        value = (data >> 0) & 0x7FFF,
        enable = (data >> 15) & 0x0001,
    )

def _unpack_NASSPCh33(data):
    return NASSPCh33(
        value = (data >> 0) & 0x7FFF,
        enable = (data >> 15) & 0x0001,
    )

def _unpack_NASSPTlossMcts(data):
    return NASSPTlossMcts(
        value = (data >> 0) & 0xFFFF,
    )

def _unpack_NASSPTlossT12s(data):
    return NASSPTlossT12s(
        value = (data >> 0) & 0xFFFF,
    )

def _unpack_NASSPPipaX(data):
    return NASSPPipaX(
        counts = (data >> 0) & 0x7FFF,
    )

def _unpack_NASSPPipaY(data):
    return NASSPPipaY(
        counts = (data >> 0) & 0x7FFF,
    )

def _unpack_NASSPPipaZ(data):
    return NASSPPipaZ(
        counts = (data >> 0) & 0x7FFF,
    )

def _unpack_NASSPCduXCmd(data):
    return NASSPCduXCmd(
        counts = (data >> 0) & 0x7FFF,
        new = (data >> 15) & 0x0001,
    )

def _unpack_NASSPCduYCmd(data):
    return NASSPCduYCmd(
        counts = (data >> 0) & 0x7FFF,
        new = (data >> 15) & 0x0001,
    )

def _unpack_NASSPCduZCmd(data):
    return NASSPCduZCmd(
        counts = (data >> 0) & 0x7FFF,
        new = (data >> 15) & 0x0001,
    )

def _unpack_NASSPCduTCmd(data):
    return NASSPCduTCmd(
        counts = (data >> 0) & 0x7FFF,
        new = (data >> 15) & 0x0001,
    )

def _unpack_NASSPCduSCmd(data):
    return NASSPCduSCmd(
        counts = (data >> 0) & 0x7FFF,
        new = (data >> 15) & 0x0001,
    )

def _unpack_NASSPThrust(data):
    return NASSPThrust(
        counts = (data >> 0) & 0x7FFF,
        new = (data >> 15) & 0x0001,
    )

def _unpack_NASSPAltm(data):
    return NASSPAltm(
        counts = (data >> 0) & 0x7FFF,
        new = (data >> 15) & 0x0001,
    )

def _unpack_MonChanFEXT(data):
    return MonChanFEXT(
        fext = (data >> 4) & 0x0007,
    )

def _unpack_MonChanDownlink(data):
    return MonChanDownlink(
        data = (data >> 0) & 0x7FFF,
        valid = (data >> 15) & 0x0001,
    )

def _unpack_MonChanRestart(data):
    return MonChanRestart(
        parity_fail = (data >> 0) & 0x0001,
        parity_erasable = (data >> 1) & 0x0001,
        tc_trap = (data >> 2) & 0x0001,
        rupt_lock = (data >> 3) & 0x0001,
        night_watchman = (data >> 4) & 0x0001,
        voltage_fail = (data >> 5) & 0x0001,
        counter_fail = (data >> 6) & 0x0001,
        scaler_fail = (data >> 7) & 0x0001,
        scaler_double = (data >> 8) & 0x0001,
    )

def _unpack_DSKYProg(data):
    return DSKYProg(
        digit1 = (data >> 0) & 0x001F,
        digit2 = (data >> 5) & 0x001F,
    )

def _unpack_DSKYVerb(data):
    return DSKYVerb(
        digit1 = (data >> 0) & 0x001F,
        digit2 = (data >> 5) & 0x001F,
    )

def _unpack_DSKYNoun(data):
    return DSKYNoun(
        digit1 = (data >> 0) & 0x001F,
        digit2 = (data >> 5) & 0x001F,
    )

def _unpack_DSKYReg1L(data):
    return DSKYReg1L(
        digit1 = (data >> 0) & 0x001F,
        digit2 = (data >> 5) & 0x001F,
        digit3 = (data >> 10) & 0x001F,
    )

def _unpack_DSKYReg1H(data):
    return DSKYReg1H(
        digit4 = (data >> 0) & 0x001F,
        digit5 = (data >> 5) & 0x001F,
        sign = (data >> 10) & 0x0003,
    )

def _unpack_DSKYReg2L(data):
    return DSKYReg2L(
        digit1 = (data >> 0) & 0x001F,
        digit2 = (data >> 5) & 0x001F,
        digit3 = (data >> 10) & 0x001F,
    )

def _unpack_DSKYReg2H(data):
    return DSKYReg2H(
        digit4 = (data >> 0) & 0x001F,
        digit5 = (data >> 5) & 0x001F,
        sign = (data >> 10) & 0x0003,
    )

def _unpack_DSKYReg3L(data):
    return DSKYReg3L(
        digit1 = (data >> 0) & 0x001F,
        digit2 = (data >> 5) & 0x001F,
        digit3 = (data >> 10) & 0x001F,
    )

def _unpack_DSKYReg3H(data):
    return DSKYReg3H(
        digit4 = (data >> 0) & 0x001F,
        digit5 = (data >> 5) & 0x001F,
        sign = (data >> 10) & 0x0003,
    )

def _unpack_DSKYStatus(data):
    return DSKYStatus(
        vel = (data >> 0) & 0x0001,
        alt = (data >> 1) & 0x0001,
        tracker = (data >> 2) & 0x0001,
        restart = (data >> 3) & 0x0001,
        prog = (data >> 4) & 0x0001,
        gimbal_lock = (data >> 5) & 0x0001,
        temp = (data >> 6) & 0x0001,
        prio_disp = (data >> 7) & 0x0001,
        no_dap = (data >> 8) & 0x0001,
        opr_err = (data >> 9) & 0x0001,
        key_rel = (data >> 10) & 0x0001,
        stby = (data >> 11) & 0x0001,
        no_att = (data >> 12) & 0x0001,
        uplink_acty = (data >> 13) & 0x0001,
        comp_acty = (data >> 14) & 0x0001,
        vnflash = (data >> 15) & 0x0001,
    )

def _unpack_Erasable(addr, data):
    return Erasable(
        addr = addr,
        parity = (data >> 0) & 0x0001,
        data = (data >> 1) & 0x7FFF,
    )

def _unpack_ControlStop(data):
    return ControlStop(
        t12 = (data >> 0) & 0x0001,
        nisq = (data >> 1) & 0x0001,
        s1 = (data >> 2) & 0x0001,
        s2 = (data >> 3) & 0x0001,
        w = (data >> 4) & 0x0001,
        s_w = (data >> 5) & 0x0001,
        s_i = (data >> 6) & 0x0001,
        chan = (data >> 7) & 0x0001,
        par = (data >> 8) & 0x0001,
        i = (data >> 9) & 0x0001,
        prog_step = (data >> 10) & 0x0001,
        s1_s2 = (data >> 11) & 0x0001,
    )

def _unpack_ControlStopCause(data):
    return ControlStopCause(
        t12 = (data >> 0) & 0x0001,
        nisq = (data >> 1) & 0x0001,
        s1 = (data >> 2) & 0x0001,
        s2 = (data >> 3) & 0x0001,
        w = (data >> 4) & 0x0001,
        s_w = (data >> 5) & 0x0001,
        s_i = (data >> 6) & 0x0001,
        chan = (data >> 7) & 0x0001,
        par = (data >> 8) & 0x0001,
        i = (data >> 9) & 0x0001,
        prog_step = (data >> 10) & 0x0001,
    )

def _unpack_ControlMNHRPT(data):
    return ControlMNHRPT(
        mnhrpt = (data >> 0) & 0x0001,
    )

def _unpack_ControlMNHNC(data):
    return ControlMNHNC(
        mnhnc = (data >> 0) & 0x0001,
    )

def _unpack_ControlS1S(data):
    return ControlS1S(
        s = (data >> 0) & 0x0FFF,
    )

def _unpack_ControlS1Bank(data):
    return ControlS1Bank(
        eb = (data >> 0) & 0x0007,
        fext = (data >> 4) & 0x0007,
        fb = (data >> 10) & 0x001F,
    )

def _unpack_ControlS1SIgnore(data):
    return ControlS1SIgnore(
        s = (data >> 0) & 0x0FFF,
    )

def _unpack_ControlS1BankIgnore(data):
    return ControlS1BankIgnore(
        eb = (data >> 0) & 0x0007,
        fext = (data >> 4) & 0x0007,
        fb = (data >> 10) & 0x001F,
    )

def _unpack_ControlS2S(data):
    return ControlS2S(
        s = (data >> 0) & 0x0FFF,
    )

def _unpack_ControlS2Bank(data):
    return ControlS2Bank(
        eb = (data >> 0) & 0x0007,
        fext = (data >> 4) & 0x0007,
        fb = (data >> 10) & 0x001F,
    )

def _unpack_ControlS2SIgnore(data):
    return ControlS2SIgnore(
        s = (data >> 0) & 0x0FFF,
    )

def _unpack_ControlS2BankIgnore(data):
    return ControlS2BankIgnore(
        eb = (data >> 0) & 0x0007,
        fext = (data >> 4) & 0x0007,
        fb = (data >> 10) & 0x001F,
    )

def _unpack_ControlWriteW(data):
    return ControlWriteW(
        mode = (data >> 0) & 0x0007,
        s1_s2 = (data >> 3) & 0x0001,
    )

def _unpack_ControlTimeSwitches(data):
    return ControlTimeSwitches(
        t01 = (data >> 0) & 0x0001,
        t02 = (data >> 1) & 0x0001,
        t03 = (data >> 2) & 0x0001,
        t04 = (data >> 3) & 0x0001,
        t05 = (data >> 4) & 0x0001,
        t06 = (data >> 5) & 0x0001,
        t07 = (data >> 6) & 0x0001,
        t08 = (data >> 7) & 0x0001,
        t09 = (data >> 8) & 0x0001,
        t10 = (data >> 9) & 0x0001,
        t11 = (data >> 10) & 0x0001,
        t12 = (data >> 11) & 0x0001,
    )

def _unpack_ControlPulseSwitches(data):
    return ControlPulseSwitches(
        a = (data >> 0) & 0x0001,
        z = (data >> 1) & 0x0001,
        q = (data >> 2) & 0x0001,
        x = (data >> 3) & 0x0001,
        y = (data >> 4) & 0x0001,
        u = (data >> 5) & 0x0001,
        b = (data >> 6) & 0x0001,
        g = (data >> 7) & 0x0001,
        l = (data >> 8) & 0x0001,
        wch = (data >> 9) & 0x0001,
        rch = (data >> 10) & 0x0001,
        sp = (data >> 11) & 0x0001,
    )

def _unpack_ControlWCompVal(data):
    return ControlWCompVal(
        val = (data >> 0) & 0xFFFF,
    )

def _unpack_ControlWCompIgnore(data):
    return ControlWCompIgnore(
        ignore = (data >> 0) & 0xFFFF,
    )

def _unpack_ControlWCompParity(data):
    return ControlWCompParity(
        parity = (data >> 0) & 0x0003,
        ignore = (data >> 2) & 0x0003,
    )

def _unpack_ControlICompVal(data):
    return ControlICompVal(
        sq = (data >> 0) & 0x003F,
        sqext = (data >> 6) & 0x0001,
        st = (data >> 7) & 0x0007,
        br = (data >> 10) & 0x0003,
    )

def _unpack_ControlICompIgnore(data):
    return ControlICompIgnore(
        sq = (data >> 0) & 0x003F,
        sqext = (data >> 6) & 0x0001,
        st = (data >> 7) & 0x0007,
        br = (data >> 10) & 0x0003,
    )

def _unpack_ControlICompStatus(data):
    return ControlICompStatus(
        iip = (data >> 0) & 0x0001,
        inhl = (data >> 1) & 0x0001,
        inkl = (data >> 2) & 0x0001,
        ld = (data >> 3) & 0x0001,
        chld = (data >> 4) & 0x0001,
        rd = (data >> 5) & 0x0001,
        chrd = (data >> 6) & 0x0001,
        iip_ign = (data >> 7) & 0x0001,
        inhl_ign = (data >> 8) & 0x0001,
        inkl_ign = (data >> 9) & 0x0001,
        ld_ign = (data >> 10) & 0x0001,
        chld_ign = (data >> 11) & 0x0001,
        rd_ign = (data >> 12) & 0x0001,
        chrd_ign = (data >> 13) & 0x0001,
    )

def _unpack_ControlLoadReadS1S2(data):
    return ControlLoadReadS1S2(
        load_preset = (data >> 0) & 0x0001,
        load_chan = (data >> 1) & 0x0001,
        read_preset = (data >> 2) & 0x0001,
        read_chan = (data >> 3) & 0x0001,
        start_preset = (data >> 4) & 0x0001,
    )

def _unpack_ControlBankS(data):
    return ControlBankS(
        s_only = (data >> 0) & 0x0001,
    )

def _unpack_ControlDoscal(data):
    return ControlDoscal(
        doscal = (data >> 0) & 0x0001,
    )

def _unpack_ControlDbltst(data):
    return ControlDbltst(
        dbltst = (data >> 0) & 0x0001,
    )

def _unpack_ControlNHALGA(data):
    return ControlNHALGA(
        nhalga = (data >> 0) & 0x0001,
    )

def _unpack_ControlSTRT1(data):
    return ControlSTRT1(
        strt1 = (data >> 0) & 0x0001,
    )

def _unpack_ControlSTRT2(data):
    return ControlSTRT2(
        strt2 = (data >> 0) & 0x0001,
    )

def _unpack_MonRegA(data):
    return MonRegA(
        a = (data >> 0) & 0xFFFF,
    )

def _unpack_MonRegL(data):
    return MonRegL(
        l = (data >> 0) & 0xFFFF,
    )

def _unpack_MonRegQ(data):
    return MonRegQ(
        q = (data >> 0) & 0xFFFF,
    )

def _unpack_MonRegZ(data):
    return MonRegZ(
        z = (data >> 0) & 0xFFFF,
    )

def _unpack_MonRegBB(data):
    return MonRegBB(
        eb = (data >> 0) & 0x0007,
        fb = (data >> 10) & 0x001F,
    )

def _unpack_MonRegB(data):
    return MonRegB(
        b = (data >> 0) & 0xFFFF,
    )

def _unpack_MonRegS(data):
    return MonRegS(
        s = (data >> 0) & 0x0FFF,
    )

def _unpack_MonRegG(data):
    return MonRegG(
        g = (data >> 0) & 0xFFFF,
    )

def _unpack_MonRegY(data):
    return MonRegY(
        y = (data >> 0) & 0xFFFF,
    )

def _unpack_MonRegU(data):
    return MonRegU(
        u = (data >> 0) & 0xFFFF,
    )

def _unpack_MonRegI(data):
    return MonRegI(
        sq = (data >> 0) & 0x003F,
        sqext = (data >> 6) & 0x0001,
        st = (data >> 7) & 0x0007,
        br = (data >> 10) & 0x0003,
    )

def _unpack_MonRegStatus(data):
    return MonRegStatus(
        gojam = (data >> 0) & 0x0001,
        run = (data >> 1) & 0x0001,
        iip = (data >> 2) & 0x0001,
        inhl = (data >> 3) & 0x0001,
        inkl = (data >> 4) & 0x0001,
        outcom = (data >> 5) & 0x0001,
    )

def _unpack_MonRegParity(data):
    return MonRegParity(
        g_gp = (data >> 0) & 0x0001,
        g_sp = (data >> 1) & 0x0001,
        w_gp = (data >> 2) & 0x0001,
        w_sp = (data >> 3) & 0x0001,
    )

def _unpack_MonRegW(data):
    return MonRegW(
        w = (data >> 0) & 0xFFFF,
    )

def _unpack_Fixed(addr, data):
    return Fixed(
        addr = addr,
        parity = (data >> 0) & 0x0001,
        data = (data >> 1) & 0x7FFF,
    )

def _unpack_Trace(addr, data):
    return Trace(
        addr = addr,
        data = (data >> 0) & 0xFFFF,
    )

def _unpack_SimErasable(addr, data):
    return SimErasable(
        addr = addr,
        parity = (data >> 0) & 0x0001,
        data = (data >> 1) & 0x7FFF,
    )

def _unpack_StatusAlarms(data):
    return StatusAlarms(
        vfail = (data >> 0) & 0x0001,
        oscal = (data >> 1) & 0x0001,
        scafl = (data >> 2) & 0x0001,
        scdbl = (data >> 3) & 0x0001,
        ctral = (data >> 4) & 0x0001,
        tcal = (data >> 5) & 0x0001,
        rptal = (data >> 6) & 0x0001,
        fpal = (data >> 7) & 0x0001,
        epal = (data >> 8) & 0x0001,
        watch = (data >> 9) & 0x0001,
        pipal = (data >> 10) & 0x0001,
        warn = (data >> 11) & 0x0001,
    )

def _unpack_StatusPeripheral(data):
    return StatusPeripheral(
        crs_cycle = (data >> 0) & 0x0001,
        ems_cycle = (data >> 1) & 0x0001,
        ld = (data >> 2) & 0x0001,
        chld = (data >> 3) & 0x0001,
        rd = (data >> 4) & 0x0001,
        chrd = (data >> 5) & 0x0001,
    )

def _unpack_StatusMonTemp(data):
    return StatusMonTemp(
        counts = (data >> 4) & 0x0FFF,
    )

def _unpack_StatusVccInt(data):
    return StatusVccInt(
        counts = (data >> 4) & 0x0FFF,
    )

def _unpack_StatusVccAux(data):
    return StatusVccAux(
        counts = (data >> 4) & 0x0FFF,
    )

def _unpack_StatusAgcA15(data):
    return StatusAgcA15(
        counts = (data >> 4) & 0x0FFF,
    )

def _unpack_StatusAgcA16(data):
    return StatusAgcA16(
        counts = (data >> 4) & 0x0FFF,
    )

def _unpack_StatusMismatchAddr(data):
    return StatusMismatchAddr(
        addr = (data >> 0) & 0xFFFF,
    )

def _unpack_StatusMismatchData(data):
    return StatusMismatchData(
        data = (data >> 0) & 0xFFFF,
    )


_unpack_reg_fns = {
    (DATA_FLAG | AddressGroup.NASSP, NASSP.Ch10): _unpack_NASSPCh10,
    (DATA_FLAG | AddressGroup.NASSP, NASSP.Ch30): _unpack_NASSPCh30,
    (DATA_FLAG | AddressGroup.NASSP, NASSP.Ch31): _unpack_NASSPCh31,
    (DATA_FLAG | AddressGroup.NASSP, NASSP.Ch32): _unpack_NASSPCh32,
    (DATA_FLAG | AddressGroup.NASSP, NASSP.Ch33): _unpack_NASSPCh33,
    (DATA_FLAG | AddressGroup.NASSP, NASSP.TlossMcts): _unpack_NASSPTlossMcts,
    (DATA_FLAG | AddressGroup.NASSP, NASSP.TlossT12s): _unpack_NASSPTlossT12s,
    (DATA_FLAG | AddressGroup.NASSP, NASSP.PipaX): _unpack_NASSPPipaX,
    (DATA_FLAG | AddressGroup.NASSP, NASSP.PipaY): _unpack_NASSPPipaY,
    (DATA_FLAG | AddressGroup.NASSP, NASSP.PipaZ): _unpack_NASSPPipaZ,
    (DATA_FLAG | AddressGroup.NASSP, NASSP.CduXCmd): _unpack_NASSPCduXCmd,
    (DATA_FLAG | AddressGroup.NASSP, NASSP.CduYCmd): _unpack_NASSPCduYCmd,
    (DATA_FLAG | AddressGroup.NASSP, NASSP.CduZCmd): _unpack_NASSPCduZCmd,
    (DATA_FLAG | AddressGroup.NASSP, NASSP.CduTCmd): _unpack_NASSPCduTCmd,
    (DATA_FLAG | AddressGroup.NASSP, NASSP.CduSCmd): _unpack_NASSPCduSCmd,
    (DATA_FLAG | AddressGroup.NASSP, NASSP.Thrust): _unpack_NASSPThrust,
    (DATA_FLAG | AddressGroup.NASSP, NASSP.Altm): _unpack_NASSPAltm,
    (DATA_FLAG | AddressGroup.MonChan, MonChan.FEXT): _unpack_MonChanFEXT,
    (DATA_FLAG | AddressGroup.MonChan, MonChan.Downlink): _unpack_MonChanDownlink,
    (DATA_FLAG | AddressGroup.MonChan, MonChan.Restart): _unpack_MonChanRestart,
    (DATA_FLAG | AddressGroup.DSKY, DSKY.Prog): _unpack_DSKYProg,
    (DATA_FLAG | AddressGroup.DSKY, DSKY.Verb): _unpack_DSKYVerb,
    (DATA_FLAG | AddressGroup.DSKY, DSKY.Noun): _unpack_DSKYNoun,
    (DATA_FLAG | AddressGroup.DSKY, DSKY.Reg1L): _unpack_DSKYReg1L,
    (DATA_FLAG | AddressGroup.DSKY, DSKY.Reg1H): _unpack_DSKYReg1H,
    (DATA_FLAG | AddressGroup.DSKY, DSKY.Reg2L): _unpack_DSKYReg2L,
    (DATA_FLAG | AddressGroup.DSKY, DSKY.Reg2H): _unpack_DSKYReg2H,
    (DATA_FLAG | AddressGroup.DSKY, DSKY.Reg3L): _unpack_DSKYReg3L,
    (DATA_FLAG | AddressGroup.DSKY, DSKY.Reg3H): _unpack_DSKYReg3H,
    (DATA_FLAG | AddressGroup.DSKY, DSKY.Status): _unpack_DSKYStatus,
    (DATA_FLAG | AddressGroup.Control, Control.Stop): _unpack_ControlStop,
    (DATA_FLAG | AddressGroup.Control, Control.StopCause): _unpack_ControlStopCause,
    (DATA_FLAG | AddressGroup.Control, Control.MNHRPT): _unpack_ControlMNHRPT,
    (DATA_FLAG | AddressGroup.Control, Control.MNHNC): _unpack_ControlMNHNC,
    (DATA_FLAG | AddressGroup.Control, Control.S1S): _unpack_ControlS1S,
    (DATA_FLAG | AddressGroup.Control, Control.S1Bank): _unpack_ControlS1Bank,
    (DATA_FLAG | AddressGroup.Control, Control.S1SIgnore): _unpack_ControlS1SIgnore,
    (DATA_FLAG | AddressGroup.Control, Control.S1BankIgnore): _unpack_ControlS1BankIgnore,
    (DATA_FLAG | AddressGroup.Control, Control.S2S): _unpack_ControlS2S,
    (DATA_FLAG | AddressGroup.Control, Control.S2Bank): _unpack_ControlS2Bank,
    (DATA_FLAG | AddressGroup.Control, Control.S2SIgnore): _unpack_ControlS2SIgnore,
    (DATA_FLAG | AddressGroup.Control, Control.S2BankIgnore): _unpack_ControlS2BankIgnore,
    (DATA_FLAG | AddressGroup.Control, Control.WriteW): _unpack_ControlWriteW,
    (DATA_FLAG | AddressGroup.Control, Control.TimeSwitches): _unpack_ControlTimeSwitches,
    (DATA_FLAG | AddressGroup.Control, Control.PulseSwitches): _unpack_ControlPulseSwitches,
    (DATA_FLAG | AddressGroup.Control, Control.WCompVal): _unpack_ControlWCompVal,
    (DATA_FLAG | AddressGroup.Control, Control.WCompIgnore): _unpack_ControlWCompIgnore,
    (DATA_FLAG | AddressGroup.Control, Control.WCompParity): _unpack_ControlWCompParity,
    (DATA_FLAG | AddressGroup.Control, Control.ICompVal): _unpack_ControlICompVal,
    (DATA_FLAG | AddressGroup.Control, Control.ICompIgnore): _unpack_ControlICompIgnore,
    (DATA_FLAG | AddressGroup.Control, Control.ICompStatus): _unpack_ControlICompStatus,
    (DATA_FLAG | AddressGroup.Control, Control.LoadReadS1S2): _unpack_ControlLoadReadS1S2,
    (DATA_FLAG | AddressGroup.Control, Control.BankS): _unpack_ControlBankS,
    (DATA_FLAG | AddressGroup.Control, Control.Doscal): _unpack_ControlDoscal,
    (DATA_FLAG | AddressGroup.Control, Control.Dbltst): _unpack_ControlDbltst,
    (DATA_FLAG | AddressGroup.Control, Control.NHALGA): _unpack_ControlNHALGA,
    (DATA_FLAG | AddressGroup.Control, Control.STRT1): _unpack_ControlSTRT1,
    (DATA_FLAG | AddressGroup.Control, Control.STRT2): _unpack_ControlSTRT2,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.A): _unpack_MonRegA,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.L): _unpack_MonRegL,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.Q): _unpack_MonRegQ,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.Z): _unpack_MonRegZ,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.BB): _unpack_MonRegBB,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.B): _unpack_MonRegB,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.S): _unpack_MonRegS,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.G): _unpack_MonRegG,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.Y): _unpack_MonRegY,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.U): _unpack_MonRegU,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.I): _unpack_MonRegI,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.Status): _unpack_MonRegStatus,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.Parity): _unpack_MonRegParity,
    (DATA_FLAG | AddressGroup.MonReg, MonReg.W): _unpack_MonRegW,
    (DATA_FLAG | AddressGroup.Status, Status.Alarms): _unpack_StatusAlarms,
    (DATA_FLAG | AddressGroup.Status, Status.Peripheral): _unpack_StatusPeripheral,
    (DATA_FLAG | AddressGroup.Status, Status.MonTemp): _unpack_StatusMonTemp,
    (DATA_FLAG | AddressGroup.Status, Status.VccInt): _unpack_StatusVccInt,
    (DATA_FLAG | AddressGroup.Status, Status.VccAux): _unpack_StatusVccAux,
    (DATA_FLAG | AddressGroup.Status, Status.AgcA15): _unpack_StatusAgcA15,
    (DATA_FLAG | AddressGroup.Status, Status.AgcA16): _unpack_StatusAgcA16,
    (DATA_FLAG | AddressGroup.Status, Status.MismatchAddr): _unpack_StatusMismatchAddr,
    (DATA_FLAG | AddressGroup.Status, Status.MismatchData): _unpack_StatusMismatchData,
}

_unpack_mem_fns = {
    (DATA_FLAG | AddressGroup.Channels): _unpack_Channels,
    (DATA_FLAG | AddressGroup.SimFixed): _unpack_SimFixed,
    (DATA_FLAG | AddressGroup.Erasable): _unpack_Erasable,
    (DATA_FLAG | AddressGroup.Fixed): _unpack_Fixed,
    (DATA_FLAG | AddressGroup.Trace): _unpack_Trace,
    (DATA_FLAG | AddressGroup.SimErasable): _unpack_SimErasable,
}

def _pack_write_msg(group, addr, data):
    return struct.pack(DATA_FMT, DATA_FLAG | group, addr, data)

def _pack_read_msg(group, addr):
    return struct.pack(READ_FMT, group, addr)

